{"version":3,"sources":["Context/MovieContext.js","components/GlobalComponents/Container.js","components/Hero/HeroNav/HeroNavLink.js","components/Hero/HeroNav/HeroNavMenu.js","components/Hero/HeroNav/HeroNavSearch.js","components/Hero/HeroNav/HeroNav.js","components/Movies/Movies.js","components/Popular/Popular.js","components/Popular/Item.js","components/Output/Output.js","components/Hero/Hero.js","App.js","serviceWorker.js","index.js"],"names":["MovieContext","createContext","MovieState","children","useState","hiddenMenu","setHiddenMenu","activeLink","setActiveLink","search","setSearch","currentPage","setCurrentPage","popularMovies","setPopularMovies","filmovi","setFilmovi","React","phone","setPhone","select","setSelect","getMovies","a","fetch","response","json","data","oo","results","slice","console","log","getPopularMovies","popularMoviesResponse","popularMoviesData","ii","name","handleSearch","map","ss","length","setTimeout","title","toLowerCase","includes","useEffect","loadingTimeout","clearTimeout","Provider","value","styles","css","Container","className","HeroNavLink","btnText","btn","useContext","style","color","onClick","HeroNavMenu","HeroNavSearch","onSubmit","type","placeholder","onChange","event","target","HeroNav","id","Movies","movieItem","index","key","src","poster_path","alt","PopularMovies","popularMovieItem","Item","overview","Output","Popular","Hero","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.50f10310.chunk.js","sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\n\nexport const MovieContext = createContext();\n\nexport const MovieState = ({ children }) => {\n\n  const [hiddenMenu, setHiddenMenu] = useState(true);\n\n  const [activeLink, setActiveLink] = useState(\"TV Shows\");\n\n  const [search, setSearch] = useState(\"\");\n \n  const [currentPage, setCurrentPage] = useState(1);\n\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [filmovi, setFilmovi] = useState([]);\n  const [phone, setPhone] = React.useState(null)\n  const [select, setSelect] = useState(\"\")\n\n  const API_KEY = \"580eb2cbd86f3cc1c8b2fe2780e3e4c4\";\n\n  const getMovies = async () => {\n    const response = await fetch(\n    `https://api.themoviedb.org/3/movie/top_rated?api_key=580eb2cbd86f3cc1c8b2fe2780e3e4c4&language=en-US`//&query=${search}\n    );\n    const data = await response.json();\n     const oo = data.results.slice(0,10);\n      setFilmovi(oo);\n      console.log(oo)\n  };\n  const getPopularMovies = async () => {\n    const popularMoviesResponse = await fetch(`https://api.themoviedb.org/3/tv/top_rated?api_key=${API_KEY}&language=en-US?limit=10`);//&page=3\n    const popularMoviesData = await popularMoviesResponse.json();\n      const ii = popularMoviesData.results.slice(0,10);\n      console.log(ii.name)\n     setPopularMovies(ii);\n  };\n  \n  const handleSearch =  () => {\n    filmovi.map((ss)=>{\n  if(search.length<3){\n    return setTimeout(() => {setSearch(\"\")}, 2000); \n    }\n     if (ss.title.toLowerCase().includes(search.toLowerCase()) && search.length>2  ) {\n    return setFilmovi([ss])\n  }\n});\npopularMovies.map((ss)=>{\n  if( search.length<3){\n    return setTimeout(() => {setSearch(\"\")}, 2000); \n    }\n     if (ss.name.toLowerCase().includes(search.toLowerCase()) && search.length>2  ) {\n    return setPopularMovies([ss])\n     }\n  });\n};\nuseEffect(() => {\n  const loadingTimeout = setTimeout(() => {\nhandleSearch();\n}, 1000);\n  return () => clearTimeout(loadingTimeout);\n}, [filmovi]);\n \n  useEffect(() => {\n    getMovies();\n    getPopularMovies();\n  }, [search, currentPage]);\n\n  return (\n    <MovieContext.Provider\n      value={{\n        filmovi,\n        setFilmovi,\n        search,\n        setSearch,\n        activeLink,\n        setActiveLink,\n        handleSearch,\n        currentPage,\n        setCurrentPage,\n        popularMovies,\n        setPopularMovies,\n        hiddenMenu,\n        setHiddenMenu,\n        phone,\n        setPhone,\n        select,\n        setSelect\n      }}\n    >\n      {children}\n    </MovieContext.Provider>\n  );\n};\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\n\nconst Container = ({ children }) => (\n  <div css={styles} className=\"container\">\n    {children}\n  </div>\n);\n\nconst styles = css`\n  width: 100%;\n  max-width: 1300px;\n  margin: 0 auto;\n`;\n\nexport default Container;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { useContext } from \"react\";\nimport { MovieContext } from \"../../../Context/MovieContext\";\n\nconst HeroNavLink = ({ btnText,btn }) => {\n  const { activeLink, setSelect,setActiveLink, setHiddenMenu } = useContext(MovieContext);\n\n  return (\n    <button\n      style={{ color: activeLink === btnText ? \"#5fc5a3\" : \"#fff\" }}\n      css={styles}\n      onClick={() => {\n        setActiveLink(btnText);\n        setSelect(btn);\n        setHiddenMenu(true);\n      }}\n    >\n      {btnText}\n    </button>\n  );\n};\n\nconst styles = css`\n  border: none;\n  outline: none;\n  background: transparent;\n  font-size: 22px;\n  margin-right: \n  ;\n  font-weight: 700;\n  cursor: pointer;\n  user-select: none;\n  @media (max-width: 860px) {\n    font-size: 40px;\n  }\n`;\n\nexport default HeroNavLink;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { useContext } from \"react\";\nimport { MovieContext } from \"../../../Context/MovieContext\";\nimport HeroNavLink from \"./HeroNavLink\";\n\nconst HeroNavMenu = () => {\n  const { hiddenMenu } = useContext(MovieContext);\n  return (\n    \n    <div css={styles} className={(hiddenMenu ? \"hidden\" : \"\") + \" heroNavMenu\"}>\n      <HeroNavLink btnText=\"TV Shows\"  btn=\"popular\" />    \n      <HeroNavLink className=\"mx-2\" btnText=\"Movies\" btn=\"movies\"/>\n       </div>\n  );\n};\n\nconst styles = css`\n  padding-left: 50px;\n  @media (max-width: 860px) {\n    position: absolute;\n    top: 0;\n    left: 6rem;\n    opacity: 1;\n    min-height: 100vh;\n    background: rgba(0, 0, 0, 0.8);\n    padding-left: 0;\n    padding: 20px 50px;\n    width: 100%;\n    max-width: 340px;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    transition: all 800ms ease-in-out;\n    &.hidden {\n      left: -600px;\n      opacity: 0;\n    }\n  }\n`;\n\nexport default HeroNavMenu;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { useContext } from \"react\";\nimport { MovieContext } from \"../../../Context/MovieContext\";\n\nconst HeroNavSearch = () => {\n  const { search, setSearch, handleSearch, /* activeLink */ } = useContext(\n    MovieContext\n  );\n\n  return (\n    <form css={styles} onSubmit={handleSearch}>\n        <input\n          type=\"text\"\n          placeholder=\"Search ...\"\n          value={search}\n          onChange={(event) => setSearch(event.target.value)}\n        />\n    </form>\n  \n  );\n};\n\nconst styles = css`\n  height: 40px;\n  min-height: 40px;\n  input {\n    border: none;\n    outline: none;\n    border-radius: 50px;\n    border: 1px solid #2c2f39;\n    background: transparent;\n    padding: 10px 16px;\n    width: 860px;\n    color: #5fc5a3;\n    &::placeholder {\n      color: #5fc5a3;\n      letter-spacing: 1px;\n    }\n  }\n  @media (max-width: 860px) {\n    input {\n      width: 220px;\n    }\n  }\n`;\n\nexport default HeroNavSearch;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { useContext } from \"react\";\nimport { MovieContext } from \"../../../Context/MovieContext\";\nimport Container from \"../../GlobalComponents/Container\";\nimport HeroNavMenu from \"./HeroNavMenu\";\nimport HeroNavSearch from \"./HeroNavSearch\";\n\nconst HeroNav = () => {\n  const { hiddenMenu, setHiddenMenu } = useContext(MovieContext);\n\n  return (\n    <nav css={styles}>\n      <Container>\n        <div className=\"wrapper\">\n          <HeroNavMenu />\n        </div>\n        <HeroNavSearch />\n        <i\n          onClick={() => setHiddenMenu(!hiddenMenu)}\n          id=\"burgerMenu\"\n          className={hiddenMenu ? \"fas fa-bars\" : \"fas fa-times\"}\n        ></i>\n      </Container>\n    </nav>\n  );\n};\n\nconst styles = css`\n  width: 100%;\n  min-height: 80px;\n  padding: 20px 0;\n  background: #212229;\n  .container {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    .wrapper {\n      display: flex;\n      align-items: center;\n    }\n    #burgerMenu {\n      color: #f9a5ff;\n      cursor: pointer;\n      display: none;\n    }\n  }\n  @media (max-width: 860px) {\n    .container {\n      #burgerMenu {\n        display: block;\n      }\n    }\n  }\n  @media (max-width: 1365px) {\n    .container {\n      max-width: 90%;\n    }\n  }\n`;\n\nexport default HeroNav;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { useContext } from \"react\";\nimport { MovieContext } from \"../../Context/MovieContext\";\nimport Container from \"../GlobalComponents/Container\";\nimport HeroNavLink from \"../Hero/HeroNav/HeroNavLink\";\n\nconst Movies = () => {\n  const { filmovi,setPhone } = useContext(MovieContext);\n\n  return (\n    <div css={styles} className=\"movies\">\n      <Container>\n        { (\n          filmovi.map((movieItem, index) => (\n              <p onClick={()=>setPhone(movieItem)}>\n            <img   \n               key={index} \n               src={`https://image.tmdb.org/t/p/w400/${movieItem.poster_path}`}\n               alt=\"poster\"\n             />\n             <div >        \n                <HeroNavLink  btnText=\"Details\" btn=\"movies\" />\n             </div>\n             </p>\n           ))     \n        ) }\n      </Container>\n    </div>\n  );\n};\n\nconst styles = css`\nss{\n  color: #5fc5a3;\n \n}\n  width: 100%;\n  .container {\n    &:nth-child(1) {\n      height: 80vh;\n      overflow-y: scroll;\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n      &::-webkit-scrollbar {\n        width: 0;\n      }\n      .error {\n        font-size: 38px;\n        color: red;\n        height: 32px;\n      }\n    }\n    img {\n      width: 100%;\n      max-width: 240px;\n      height: 360px;\n      margin: 10px 0;\n    }\n  }\n  @media (max-width: 600px) {\n    .container {\n      img {\n        max-width: 100%;\n        height: 500px;\n      }\n    }\n  }\n  @media (min-width: 601px) and (max-width: 854px) {\n    .container {\n      img {\n        max-width: 48%;\n      }\n    }\n  }\n  @media (min-width: 855px) and (max-width: 1144px) {\n    .container {\n      img {\n        max-width: 31%;\n      }\n    }\n  }\n  @media (min-width: 1145px) and (max-width: 1365px) {\n    .container {\n      img {\n        max-width: 23.4%;\n      }\n    }\n  }\n`;\n\nexport default Movies;","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { useContext } from \"react\";\nimport { MovieContext } from \"../../Context/MovieContext\";\nimport Container from \"../GlobalComponents/Container\";\nimport HeroNavLink from \"../Hero/HeroNav/HeroNavLink\";\n\nconst PopularMovies = () => {\n  const { popularMovies,setPhone} = useContext(MovieContext);\n\n  return (\n    <div css={styles} className=\"popularMovies\">\n      <Container>\n        {popularMovies &&\n          popularMovies.map((popularMovieItem, index) => (\n           <p onClick={()=>setPhone(popularMovieItem)} >\n            <img /* onClick={()=>setPhone(movieItem)} */\n              key={index}\n              src={`https://image.tmdb.org/t/p/w400/${popularMovieItem.poster_path}`}\n              alt=\"poster\"\n            />\n             <div >        \n                <HeroNavLink className=\"mx-4\" btnText=\"Details\" btn=\"popular\" />\n             </div>\n            </p>\n          ))}\n      </Container>\n    </div>\n  );\n};\n\nconst styles = css`\n  width: 100%;\n  .container {\n    &:nth-child(1) {\n      height: 80vh;\n      overflow-y: scroll;\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n      &::-webkit-scrollbar {\n        width: 0;\n      }\n      .error {\n        font-size: 38px;\n        color: red;\n        height: 32px;\n      }\n    }\n    img {\n      width: 100%;\n      max-width: 240px;\n      height: 360px;\n      margin: 10px 0;\n    }\n  }\n  @media (max-width: 600px) {\n    .container {\n      img {\n        max-width: 100%;\n        height: 500px;\n      }\n    }\n  }\n  @media (min-width: 601px) and (max-width: 854px) {\n    .container {\n      img {\n        max-width: 48%;\n      }\n    }\n  }\n  @media (min-width: 855px) and (max-width: 1144px) {\n    .container {\n      img {\n        max-width: 31%;\n      }\n    }\n  }\n  @media (min-width: 1145px) and (max-width: 1365px) {\n    .container {\n      img {\n        max-width: 23.4%;\n      }\n    }\n  }\n`;\n\nexport default PopularMovies;\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { useContext } from \"react\";\r\nimport { MovieContext } from \"../../Context/MovieContext\";\r\nimport Container from \"../GlobalComponents/Container\";\r\nimport HeroNavLink from \"../Hero/HeroNav/HeroNavLink\";\r\n\r\nconst Item = () => {\r\n   const {select,phone } = useContext(MovieContext);\r\n  \r\n  return (\r\n    <div css={styles} >\r\n          <HeroNavLink className=\"s\" btnText=\"Back\" btn={select} />\r\n  <Container>\r\n        <p>\r\n          <img \r\n               src={\r\n                `https://image.tmdb.org/t/p/w400/${phone.poster_path}`   \r\n                   }\r\n               alt=\"poster\"\r\n             /> \r\n                       <h4>{phone.title}</h4>\r\n                       <h4>{phone.overview}</h4>\r\n             </p>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = css`\r\n  width: 100%;\r\n  .s{\r\n    color: red;\r\n\r\n  }\r\n  .container {\r\n    &:nth-child(1) {\r\n      height: 81vh;\r\n      overflow-y: scroll;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      flex-wrap: wrap;\r\n      &::-webkit-scrollbar {\r\n        width: 0;\r\n      }\r\n      .error {\r\n        font-size: 38px;\r\n        color: red;\r\n        height: 32px;\r\n      }\r\n    }\r\n    img {\r\n      width: 100%;\r\n      max-width: 240px;\r\n      height: 360px;\r\n      margin: 10px 0;\r\n    }\r\n  }\r\n  @media (max-width: 600px) {\r\n    .container {\r\n      img {\r\n        max-width: 100%;\r\n        height: 500px;\r\n      }\r\n    }\r\n  }\r\n  @media (min-width: 601px) and (max-width: 854px) {\r\n    .container {\r\n      img {\r\n        max-width: 48%;\r\n      }\r\n    }\r\n  }\r\n  @media (min-width: 855px) and (max-width: 1144px) {\r\n    .container {\r\n      img {\r\n        max-width: 31%;\r\n      }\r\n    }\r\n  }\r\n  @media (min-width: 1145px) and (max-width: 1365px) {\r\n    .container {\r\n      img {\r\n        max-width: 23.4%;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Item;\r\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport  { useContext } from \"react\";\nimport { MovieContext } from \"../../Context/MovieContext\";\nimport Container from \"../GlobalComponents/Container\";\nimport Movies from \"../Movies/Movies\";\nimport Popular from \"../Popular/Popular\";\nimport Item from \"../Popular/Item\";\n\nconst Output = () => {\n  const { select,activeLink } = useContext(MovieContext);\n\n  return (\n    <div css={styles} className=\"output\">\n      {activeLink === \"Movies\" && (\n        (<Container>\n            <Movies />\n        </Container>)\n      ) }\n\n      {activeLink === \"TV Shows\" && (\n        (<Container>\n          <Popular />\n        </Container>)\n      )}\n\n        {activeLink === \"Back\" && (\n          (select === \"movies\") ? \n        (<Container>\n            <Movies />\n        </Container>)\n        \n       :(<Container>\n            <Popular />\n      </Container>)) }\n\n      {activeLink === \"Details\" && (\n        <Container>\n          <Item />\n        </Container>\n      )}\n    </div>\n  );\n};\n\nconst styles = css`\n  width: 100%;\n  min-height: calc(100vh - 80px);\n  display: flex;\n  > .container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n  }\n  @media (max-width: 1365px) {\n    > .container {\n      max-width: 90%;\n    }\n  }\n`;\n\nexport default Output;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport HeroNav from \"./HeroNav/HeroNav\";\nimport Output from \"../Output/Output\";\n\nconst Hero = () => {\n  return (\n    <section css={styles} className=\"hero\">\n      <HeroNav />\n      <Output  />\n    </section>\n  );\n};\n\nconst styles = css`\n  width: 100%;\n  min-height: 100vh;\n  background: #1b1c22;\n`;\n\nexport default Hero;\n","import React from \"react\";\nimport { MovieState } from \"./Context/MovieContext\";\nimport Hero from \"./components/Hero/Hero\";\nimport \"./App.css\";\nconst App = () => {\n  return (\n  <MovieState>\n      <Hero />\n    </MovieState> \n  );\n};\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}